@import "variables";
@import "compass";
// @import "../plugins/compass/clearfix";
// @import "../plugins/compass/vertical_rhythm";
// @import "../plugins/compass/css3/box-shadow";
@import "../plugins/animation";



// ADD YOUR OWN MIXINS AND HELPERS HERE
// DESCRIBE WHAT EACH DOES AND HOW TO USE THEM

@mixin force-wrap {
  white-space: pre;
  // CSS 2.0
  white-space: pre-wrap;
  // CSS 2.1
  white-space: pre-line;
  // CSS 3.0
  white-space: -pre-wrap;
  // Opera 4-6
  white-space: -o-pre-wrap;
  // Opera 7
  white-space: -moz-pre-wrap;
  // Mozilla
  white-space: -hp-pre-wrap;
  // HP Printers
  word-wrap: break-word;
  // IE 5+ 
  }


// @mixin radius($radius:$global-radius) {
//   @if $radius {
//     -webkit-border-radius: $radius;
//     border-radius: $radius;
//   }
// }


// @mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {
//   @if $vertical-radius {
//     // Webkit doesn't understand the official shorthand syntax for specifying
//     // a vertical radius unless so in case there's several we only take the first.
//     @include experimental(border-radius, first-value-of($radius) first-value-of($vertical-radius), not -moz, -webkit, not -o, not -ms, not -khtml, not official);
//     @include experimental("border-radius", $radius unquote("/") $vertical-radius, -moz, not -webkit, not -o, not -ms, -khtml, official); }
//   @else {
//     @include experimental(border-radius, $radius); } }



// this mixin will convert any type of color passed in (variable, hex, html named) 
// and also a value for opacity. 
// The mixin will convert to rgba color for the background with the opacity applied

@mixin background-opacity($color, $opacity: 0.3) {
    background: $color; /* The Fallback */
    background: rgba($color, $opacity);
}

// A mixin to create a visual circle using border radius of half the size of the element
// which will make it appear as a circle
// TO USE: pass in a size, color for the background and an opacity.
// Note: define the width in your own class to match the width you pass in to this circle mixin

@mixin circle ($color, $opacity: 0.5) {
  
  // -webkit-border-radius: ($size/2);
  // -moz-border-radius: ($size/2);
  // border-radius: ($size/2);
  -webkit-border-radius: 50%;
  -moz-border-radius: 50%;
  border-radius: 50%;
  @include background-opacity($color, $opacity);
  // background-color: $color;

}


    
@mixin image-2x($image, $width, $height) {
    @media
        (-moz-min-device-pixel-ratio: 2),
        (-o-min-device-pixel-ratio: 2/1),
        (-webkit-min-device-pixel-ratio: 2),
        (min-device-pixel-ratio: 2),
        (min-resolution: 1.3dppx) {

        // on retina, use image that's scaled by 2
        background-image: url($image);
        background-size: 100%;
    }
}


@mixin box-sizing($bs) {
  $bs: unquote($bs);
  @include experimental(box-sizing, $bs, -moz, -webkit, not -o, not -ms, not -khtml, official); }


// List styles
// -------------------------------------------------------

// Mixins for list style types
@mixin unordered {
	 list-style-position: outside; 
	 list-style-type: disc;
}

@mixin unordered-inside {
	 list-style-position: inside; 
	 list-style-type: disc;
}

@mixin ordered {
	list-style-position: outside; 
	list-style-type: decimal;
}

@mixin ordered-inside {
	list-style-position: inside; 
	list-style-type: decimal;
}

@mixin nobullet {
	list-style-type: none;
}

  // Add rounder corners
%rounded {
@include border-radius(100px);
height:100%;
}


// Advanced typography settings
// -------------------------------------------------------

// Get advanced with type if needed for ligatures etc...

// @mixin advancedtype {
// 	//font-variant-ligatures: contextual;  				// Set the default for ligatures
// 	//-moz-font-feature-settings: "liga=1,dlig=1";    	// Ligature settings for mozilla
// 	font-kerning: normal; 								// Set the default for kerning
// 	//-webkit-font-smoothing: antialiased; 				// Improve (or in some cases royally screw with) safari's legibility somewhat
// 	//font-synthesis: none; 							// Don't allow the font to create sythetic bold/italic
// 	//text-rendering: optimizeLegibility; 				// Improve kerning pairs. Webkit gets funny with this sometimes
// }


// @mixin adjust-font-size-to($to-size, $lines: lines-for-font-size($to-size), $from-size: $base-font-size) {
//   @if not $relative-font-sizing and $from-size != $base-font-size {
//     @warn "$relative-font-sizing is false but a relative font size was passed to adjust-font-size-to"; }
//   font-size: $font-unit * $to-size / $from-size;
//   @include adjust-leading-to($lines, if($relative-font-sizing, $to-size, $base-font-size)); }

// Retina images. 
// Use with care - http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
// -------------------------------------------------------

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}


//
// Mixins
//

// We use this to control border radius.
@mixin radius($radius:$global-radius) {
  @if $radius {
    -webkit-border-radius: $radius;
    border-radius: $radius;
  }
}

// We use this to create equal side border radius on elements.
@mixin side-radius($side, $radius) {
  @if $side == left {
    -webkit-border-radius: $radius 0 0 $radius;
    border-radius: $radius 0 0 $radius;
  }
  @else if $side == right {
    -webkit-border-radius: 0 $radius $radius 0;
    border-radius: 0 $radius $radius 0;
  }
  @else if $side == top {
    -webkit-border-radius: $radius $radius 0 0;
    border-radius: $radius $radius 0 0;
  }
  @else if $side == bottom {
    -webkit-border-radius: 0 0 $radius $radius;
    border-radius: 0 0 $radius $radius;
  }
}

// We can control whether or not we have inset shadows edges.
@mixin inset-shadow($active:true) {
  -webkit-box-shadow: $shiny-edge-size $shiny-edge-color inset;
  box-shadow: $shiny-edge-size $shiny-edge-color inset;

  @if $active { &:active {
    -webkit-box-shadow: $shiny-edge-size $shiny-edge-active-color inset;
    box-shadow: $shiny-edge-size $shiny-edge-active-color inset; } }
}

// We use this to add transitions to elements
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  -webkit-transition: $property $speed $ease;
  -moz-transition: $property $speed $ease;
  transition: $property $speed $ease;
}

// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
  -moz-box-sizing: $type;
  -webkit-box-sizing: $type;
  box-sizing: $type;
}

// We use this to create equalateral triangles
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: solid $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
  }
}

// This mixin sets up the styling for typography headers with a solid overline above the type  (used throughout the UAL website)
// Default colors are set, but these can be overridden by passing in your own colors or size for the header font, top-border, border-height, 
// and padding between the top-border and the heading text.

// Notes: the default width is 100% but this can be also be overridden
//        the padding top should be specified by the number of baselines you want of padding to be added

// Default Styles:  black border at the top, border-height of 1 baseline (6px) and 1 baseline of padding at the top, 36px font-size, 100% width 
@mixin with-border-top ( $border-color: black, $border-height: 6px, $padding-top: 1, $font-size: 36px, $text-color: black, $width: 100%) { 
  
  @include padding-leader($padding-top); // add top padding  
  border-top: solid $border-height $border-color; // set top border 
  color: $text-color;
  @include adjust-font-size-to($font-size); 
  width: $width;
}

// AM mixin for dotted border-image on bottom of element
@mixin border-image-dot ( $border-thickness: 1px, $border-color: $bg-gray ) {
  border-width: 0 0 $border-thickness 0;
  border-bottom: $border-thickness dotted $border-color;
  -moz-border-image:url("../img/dashline_border_img.png") 0 0 1 0 repeat;
  -webkit-border-image:url("../img/dashline_border_img.png") 0 0 1 0 repeat;
  border-image:url("../img/dashline_border_img.png") 0 0 1 0 repeat;
}



// We use this to do clear floats
@mixin clearfix() {
  *zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}



// ------------------------------------------------------

//************************************************************************//
// Prefixer Mixin - let's us add the browser specific prefixes for new(ish) CCS3 styles
// useful for cross browser support for Border Radius, Flex-Box etc. 
// Example: @include prefixer(border-radius, $radii, webkit ms spec);
//************************************************************************//
$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default; // required for keyframe mixin

@mixin prefixer ($property, $value, $prefixes: webkit moz ms o) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      @if $prefix-for-webkit {
        -webkit-#{$property}: $value;
      }
    }
    @else if $prefix == moz {
      @if $prefix-for-mozilla {
        -moz-#{$property}: $value;
      }
    }
    @else if $prefix == ms {
      @if $prefix-for-microsoft {
        -ms-#{$property}: $value;
      }
    }
    @else if $prefix == o {
      @if $prefix-for-opera {
        -o-#{$property}: $value;
      }
    }
    @else if $prefix == spec {
      @if $prefix-for-spec {
        #{$property}: $value;
      }
    }
    @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin disable-prefix-for-all() {
  $prefix-for-webkit:    false;
  $prefix-for-mozilla:   false;
  $prefix-for-microsoft: false;
  $prefix-for-opera:     false;
  $prefix-for-spec:      false;
}

// ------------------------------------------------------











// ---- Mixins for FlexBox
//  This mixin adds the vendor prefixes when using flex-box for layouts
//

// This mixing lets us use a custom shorthand notation for flexbox
@mixin box($orient: inline-axis, $pack: start, $align: stretch) {
  @include display-box;
  @include box-orient($orient);
  @include box-pack($pack);
  @include box-align($align);
}

@mixin display-box {
  display: -webkit-box;
  display: -moz-box;
  display: box;
}

@mixin box-orient($orient: inline-axis) {
// horizontal|vertical|inline-axis|block-axis|inherit
  @include prefixer(box-orient, $orient, webkit moz spec);
}

@mixin box-pack($pack: start) {
// start|end|center|justify
  @include prefixer(box-pack, $pack, webkit moz spec);
}

@mixin box-align($align: stretch) {
// start|end|center|baseline|stretch
  @include prefixer(box-align, $align, webkit moz spec);
}

@mixin box-direction($direction: normal) {
// normal|reverse|inherit
  @include prefixer(box-direction, $direction, webkit moz spec);
}

@mixin box-lines($lines: single) {
// single|multiple
  @include prefixer(box-lines, $lines, webkit moz spec);
}

@mixin box-ordinal-group($int: 1) {
  @include prefixer(box-ordinal-group, $int, webkit moz spec);
}

@mixin box-flex($value: 0.0) {
  @include prefixer(box-flex, $value, webkit moz spec);
}

@mixin box-flex-group($int: 1) {
  @include prefixer(box-flex-group, $int, webkit moz spec);
}


//************************************************************************//
// New Flexbox 2012 Spec
// http://dev.w3.org/csswg/css3-flexbox/
//************************************************************************//
@mixin display($value) {
//  flex | inline-flex
  @if $value == "flex" {
    display: -webkit-flex;
    display: -moz-flex;
    display: flex;
  }

  @elseif $value == "inline-flex" {
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: flex;
  }

  @else {
    display: $value;
  }
}

@mixin flex($value) {
  @include prefixer(flex, $value, webkit moz spec);
}

@mixin flex-direction($value: row) {
//  row | row-reverse | column | column-reverse
  @include prefixer(flex-direction, $value, webkit moz spec);
}

@mixin flex-wrap($value: nowrap) {
// nowrap | wrap | wrap-reverse
  @include prefixer(flex-wrap, $value, webkit moz spec);
}
@mixin flex-flow($value) {
// flex-direction || flex-wrap
  @include prefixer(flex-flow, $value, webkit moz spec);
}

@mixin order($int: 0) {
  @include prefixer(order, $int, webkit moz spec);
}

@mixin flex-grow($number: 0) {
  @include prefixer(flex-grow, $number, webkit moz spec);
}

@mixin flex-shrink($number: 1) {
  @include prefixer(flex-shrink, $number, webkit moz spec);
}

@mixin flex-basis($width: auto) {
  @include prefixer(flex-basis, $width, webkit moz spec);
}

@mixin justify-content ($value: flex-start) {
// flex-start | flex-end | center | space-between | space-around
  @include prefixer(justify-content, $value, webkit moz spec)
}

@mixin align-items($value: stretch) {
// flex-start | flex-end | center | baseline | stretch
  @include prefixer(align-items, $value, webkit moz spec)
}

@mixin align-self($value: auto) {
// auto | flex-start | flex-end | center | baseline | stretch
  @include prefixer(align-self, $value, webkit moz spec)
}

@mixin align-content($value: stretch) {
// flex-start | flex-end | center | space-between | space-around | stretch
  @include prefixer(align-content, $value, webkit moz spec)
}


