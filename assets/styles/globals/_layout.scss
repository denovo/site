// Table of Contents

// See mark-down file for how to use compass' rhythm and trailer/leader functions or check the compass documentation
// As a rule of thumb, don't nest further than 3 levels deep
// -------------------------------------------------------------

// This is a good example!
// .styleguide-format {
//   border: 1px solid #0f0;
//   color: #000;
//   background: rgba(0,0,0,0.5);
// }

// ::Layout styles 
	// ::Media queries 

@include establish-baseline ;

body { 
	color: $base-color;
	background: $background ;
	font-family: $font-family;
}

* {
	@include box-sizing;
}

a {
	color:#000;
	border-bottom: 1px  solid;
	line-height: 24px;
	text-decoration:none;
	//@include force-wrap;					// force text links to wrap
	&:hover, &:focus, &:active {

	color: #929292;
	}
}

.box {
	background-color: #000;
}

// Max width, for images etc... in RWD
.content-wrapper img { 
	max-width: 100%; 
	height: auto; 
}


/* ::Clearfixs and extends. Use which suits best */
/* ----------------------------------------------------------- */

// CHOOSE YOUR CLEARFIX, OR YOU KNOW USE BOTH. WHATEVER, I'M NOT YOUR MOTHER

// Use clearfix if you need general clearfixing
.clearfix 			{ 
	@include clearfix; 
}

.cf { 
	zoom: 1; 
}
.cf:before,
.cf:after { 
	content: ""; 
	display: table; 
}
.cf:after { 
	clear: both; 
}



// Use pie-clearfix if you need clearfixing that doesn't use overflow: hidden
.pie-clearfix 		{ 
	@include pie-clearfix; 
}


// Functions for px to em conversions
// ------------------------------------------------------------

@function emify($target, $context) {
   @if $target == 0 { @return 0 }
   @return $target / $context + 0em;
}

// Make px to ems using base-font-size 
// echo as: font-size: em-font(#px);

@function em-font($target, $context: $base-font-size) {
   @return emify($target, $context);
}


// Make px to ems using base-line-height 
// echo as: font-size: em-base(#px);

@function em-base($target, $context: $base-line-height) {
   @return emify($target, $context);
}


@function em($target, $context: $base-font-size) {
    @return ($target / $context) * 1em;
}

.content-wrapper, .wrapper {
	width: 92.5%;
	max-width: 1280px;
	margin: 0 auto;
	clear: both;
	min-width:320px;
}

.feature-wrapper {
	width: 100%;
	max-width: 100%;
}


#header {
	background: $background;
	width:100%;
	@extend .clearfix;
	@include padding-leader(6);
	border-top: 6px solid #000000;

	@include gs-media(m, min-max) {
		padding-top: 0px;
		border-top:0px;
	}

	.banner {
		@extend .wrapper;
		@extend .clearfix;
		position: relative;
		@include gs-media(m, min-max) {
			@include gs-span(m, all);
			background:black;
			padding-left:3.75%;
			padding-right:3.75%;
			overflow: visible;
			@include padding-leader(1);
			@include padding-trailer(2);
		}


		
		.header {
			@include gs-span(d, all);
		}
	}
}

.footer {
		width:100%;
		background: black;
		clear: both;

		.footer-links {			
			@include padding-leader(4);
			@include gs-span(d, all);
			margin-left:12px;
			max-width:1280px;
			margin: 0 auto;
			float:none;


			ul {
				clear:left;
				margin-bottom:0;
			}


		li {
				@include nobullet;
				float:left;
				display:inline;
			a {
				color:#fff;
				margin-right:24px;
				font-size:12px;
				text-decoration:none;
				border-bottom:none;
			}
		}

}
		.primary-links {
			@include gs-span(d, 1, 10);
			@include padding-trailer(2);
		}

		.secondary-links {
			@include gs-span(d, 1, 12);
			@include padding-trailer(3);
			clear:left;
		}

		.copyright {
			@extend .clearfix;
			@include gs-span(d, all);
			border-top: 1px solid #fff;
						max-width:1280px;
			margin: 0 auto;
			float:none;

			p {
				@include padding-leader(3);
				margin-right:24px;
				color:#fff;
				font-size:12px;
				margin-left:12px;
			}
		}

		span {
			@include gs-span(d, 15, 16);
			a {
				float:right;
				color:#fff;
				margin-right:24px;
				font-size:12px;
				text-decoration:none;
				border-bottom:none;
			}
		}
}

header.title {
	@include gs-span(d, all);

		h1 {
			@include leader(5);
			@include trailer(5);
	
			}
}
.row {
	@include gs-span(d, all);
}

.typography {

	@include gs-media(d, min) {
		@include gs-span(d,all);
	}

	@include gs-media(t, min-max) {
		@include gs-span(t, all);
	}
}

.paragraph {

	@include gs-media(d, min) {
		@include gs-span(d, 1,12);
	}
		@include gs-media(t, min-max) {
		@include gs-span(t, all);
	}
}

.half[data-float*=right] {

	@include gs-media(d, min) {
		@include gs-span(d, 9,16);
	}

	@include gs-media(t, min-max) {
		@include gs-span(t, 5,8);
	}
}

.half[data-float*=left] {

	@include gs-media(d, min) {
		@include gs-span(t, 1,4);
	}

	@include gs-media(t, min-max) {
		@include gs-span(t, all);
	}
}	

// Google Prettycode overide for margin
// 
pre.prettyprint {
        width: 95%;
        margin: 0 ;
        padding: 1em;
        white-space: pre-wrap;
}
